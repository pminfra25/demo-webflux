package com.example.demo.controller;

import com.example.demo.model.User;
import com.example.demo.service.UserService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;
import org.springframework.test.context.bean.override.mockito.MockitoBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.reactive.server.WebTestClient;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import static org.mockito.Mockito.when;

/**
 * Unit tests for the UserController class.
 * 
 * <p>These tests verify the correct behavior of the REST controller including
 * endpoint mapping, request/response handling, and HTTP status codes.</p>
 * 
 * @author Generated by GitHub Copilot
 * @version 1.0
 * @since 1.0
 */
@WebFluxTest(UserController.class)
class UserControllerTest {
    
    @Autowired
    private WebTestClient webTestClient;
    
    @MockitoBean
    private UserService userService;
    
    private User testUser;
    
    @BeforeEach
    void setUp() {
        testUser = new User("1", "John", "Doe", "john.doe@example.com");
    }
    
    @Test
    void testGetAllUsers() {
        // Given
        User user2 = new User("2", "Jane", "Smith", "jane.smith@example.com");
        when(userService.getAllUsers()).thenReturn(Flux.just(testUser, user2));
        
        // When & Then
        webTestClient.get()
                .uri("/api/users")
                .accept(MediaType.APPLICATION_JSON)
                .exchange()
                .expectStatus().isOk()
                .expectBodyList(User.class)
                .hasSize(2)
                .contains(testUser, user2);
    }
    
    @Test
    void testGetUserById_Found() {
        // Given
        when(userService.getUserById("1")).thenReturn(Mono.just(testUser));
        
        // When & Then
        webTestClient.get()
                .uri("/api/users/1")
                .accept(MediaType.APPLICATION_JSON)
                .exchange()
                .expectStatus().isOk()
                .expectBody(User.class)
                .isEqualTo(testUser);
    }
    
    @Test
    void testGetUserById_NotFound() {
        // Given
        when(userService.getUserById("999")).thenReturn(Mono.empty());
        
        // When & Then
        webTestClient.get()
                .uri("/api/users/999")
                .accept(MediaType.APPLICATION_JSON)
                .exchange()
                .expectStatus().isNotFound();
    }
    
    @Test
    void testGetUserByEmail_Found() {
        // Given
        when(userService.getUserByEmail("john.doe@example.com")).thenReturn(Mono.just(testUser));
        
        // When & Then
        webTestClient.get()
                .uri("/api/users/email/john.doe@example.com")
                .accept(MediaType.APPLICATION_JSON)
                .exchange()
                .expectStatus().isOk()
                .expectBody(User.class)
                .isEqualTo(testUser);
    }
    
    @Test
    void testGetUserByEmail_NotFound() {
        // Given
        when(userService.getUserByEmail("nonexistent@example.com")).thenReturn(Mono.empty());
        
        // When & Then
        webTestClient.get()
                .uri("/api/users/email/nonexistent@example.com")
                .accept(MediaType.APPLICATION_JSON)
                .exchange()
                .expectStatus().isNotFound();
    }
    
    @Test
    void testSearchUsers() {
        // Given
        when(userService.searchUsersByName("John")).thenReturn(Flux.just(testUser));
        
        // When & Then
        webTestClient.get()
                .uri("/api/users/search?name=John")
                .accept(MediaType.APPLICATION_JSON)
                .exchange()
                .expectStatus().isOk()
                .expectBodyList(User.class)
                .hasSize(1)
                .contains(testUser);
    }
    
    @Test
    void testCreateUser_Success() {
        // Given
        when(userService.createUser("John", "Doe", "john.doe@example.com"))
                .thenReturn(Mono.just(testUser));
        
        // When & Then
        webTestClient.post()
                .uri("/api/users")
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue("""
                    {
                        "firstName": "John",
                        "lastName": "Doe",
                        "email": "john.doe@example.com"
                    }
                    """)
                .exchange()
                .expectStatus().isCreated()
                .expectBody(User.class)
                .isEqualTo(testUser);
    }
    
    @Test
    void testCreateUser_EmailConflict() {
        // Given
        when(userService.createUser("John", "Doe", "john.doe@example.com"))
                .thenReturn(Mono.error(new IllegalArgumentException("Email already exists")));
        
        // When & Then
        webTestClient.post()
                .uri("/api/users")
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue("""
                    {
                        "firstName": "John",
                        "lastName": "Doe",
                        "email": "john.doe@example.com"
                    }
                    """)
                .exchange()
                .expectStatus().isBadRequest();
    }
    
    @Test
    void testUpdateUser_Success() {
        // Given
        User updatedUser = testUser.withUpdatedInfo("Johnny", "Doe", "johnny.doe@example.com");
        when(userService.updateUser("1", "Johnny", "Doe", "johnny.doe@example.com"))
                .thenReturn(Mono.just(updatedUser));
        
        // When & Then
        webTestClient.put()
                .uri("/api/users/1")
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue("""
                    {
                        "firstName": "Johnny",
                        "lastName": "Doe",
                        "email": "johnny.doe@example.com"
                    }
                    """)
                .exchange()
                .expectStatus().isOk()
                .expectBody(User.class)
                .isEqualTo(updatedUser);
    }
    
    @Test
    void testUpdateUser_NotFound() {
        // Given
        when(userService.updateUser("999", "Johnny", "Doe", "johnny.doe@example.com"))
                .thenReturn(Mono.error(new IllegalArgumentException("User not found")));
        
        // When & Then
        webTestClient.put()
                .uri("/api/users/999")
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue("""
                    {
                        "firstName": "Johnny",
                        "lastName": "Doe",
                        "email": "johnny.doe@example.com"
                    }
                    """)
                .exchange()
                .expectStatus().isBadRequest();
    }
    
    @Test
    void testDeleteUser_Success() {
        // Given
        when(userService.deleteUser("1")).thenReturn(Mono.just(true));
        
        // When & Then
        webTestClient.delete()
                .uri("/api/users/1")
                .exchange()
                .expectStatus().isNoContent();
    }
    
    @Test
    void testDeleteUser_NotFound() {
        // Given
        when(userService.deleteUser("999")).thenReturn(Mono.just(false));
        
        // When & Then
        webTestClient.delete()
                .uri("/api/users/999")
                .exchange()
                .expectStatus().isNotFound();
    }
    
    @Test
    void testGetUserCount() {
        // Given
        when(userService.getUserCount()).thenReturn(Mono.just(5L));
        
        // When & Then
        webTestClient.get()
                .uri("/api/users/count")
                .accept(MediaType.APPLICATION_JSON)
                .exchange()
                .expectStatus().isOk()
                .expectBody(Long.class)
                .isEqualTo(5L);
    }
    
    @Test
    void testUserExists_True() {
        // Given
        when(userService.userExists("1")).thenReturn(Mono.just(true));
        
        // When & Then
        webTestClient.get()
                .uri("/api/users/1/exists")
                .accept(MediaType.APPLICATION_JSON)
                .exchange()
                .expectStatus().isOk()
                .expectBody(Boolean.class)
                .isEqualTo(true);
    }
    
    @Test
    void testUserExists_False() {
        // Given
        when(userService.userExists("999")).thenReturn(Mono.just(false));
        
        // When & Then
        webTestClient.get()
                .uri("/api/users/999/exists")
                .accept(MediaType.APPLICATION_JSON)
                .exchange()
                .expectStatus().isOk()
                .expectBody(Boolean.class)
                .isEqualTo(false);
    }
}
