package com.example.demo.repository.impl;

import com.example.demo.model.User;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import reactor.test.StepVerifier;

/**
 * Unit tests for the InMemoryUserRepository class.
 * 
 * <p>These tests verify the correct behavior of all repository operations
 * including CRUD operations, searches, and reactive behavior.</p>
 * 
 * @author Generated by GitHub Copilot
 * @version 1.0
 * @since 1.0
 */
class InMemoryUserRepositoryTest {
    
    private InMemoryUserRepository repository;
    private User testUser1;
    private User testUser2;
    
    @BeforeEach
    void setUp() {
        repository = new InMemoryUserRepository();
        testUser1 = new User("1", "John", "Doe", "john.doe@example.com");
        testUser2 = new User("2", "Jane", "Smith", "jane.smith@example.com");
    }
    
    @Test
    void testSave() {
        // When & Then
        StepVerifier.create(repository.save(testUser1))
                .expectNext(testUser1)
                .verifyComplete();
    }
    
    @Test
    void testFindById_Found() {
        // Given
        repository.save(testUser1).block();
        
        // When & Then
        StepVerifier.create(repository.findById("1"))
                .expectNext(testUser1)
                .verifyComplete();
    }
    
    @Test
    void testFindById_NotFound() {
        // When & Then
        StepVerifier.create(repository.findById("999"))
                .verifyComplete();
    }
    
    @Test
    void testFindByEmail_Found() {
        // Given
        repository.save(testUser1).block();
        
        // When & Then
        StepVerifier.create(repository.findByEmail("john.doe@example.com"))
                .expectNext(testUser1)
                .verifyComplete();
    }
    
    @Test
    void testFindByEmail_NotFound() {
        // When & Then
        StepVerifier.create(repository.findByEmail("nonexistent@example.com"))
                .verifyComplete();
    }
    
    @Test
    void testFindByFirstName() {
        // Given
        repository.save(testUser1).block();
        repository.save(testUser2).block();
        
        // When & Then
        StepVerifier.create(repository.findByFirstName("John"))
                .expectNext(testUser1)
                .verifyComplete();
    }
    
    @Test
    void testFindByLastName() {
        // Given
        repository.save(testUser1).block();
        repository.save(testUser2).block();
        
        // When & Then
        StepVerifier.create(repository.findByLastName("Smith"))
                .expectNext(testUser2)
                .verifyComplete();
    }
    
    @Test
    void testFindByNameContaining() {
        // Given
        repository.save(testUser1).block();
        repository.save(testUser2).block();
        User testUser3 = new User("3", "Johnny", "Johnson", "johnny.johnson@example.com");
        repository.save(testUser3).block();
        
        // When & Then - search for "john" should find John Doe and Johnny Johnson
        StepVerifier.create(repository.findByNameContaining("john"))
                .expectNextCount(2)
                .verifyComplete();
    }
    
    @Test
    void testFindAll() {
        // Given
        repository.save(testUser1).block();
        repository.save(testUser2).block();
        
        // When & Then
        StepVerifier.create(repository.findAll())
                .expectNextCount(2)
                .verifyComplete();
    }
    
    @Test
    void testDeleteById() {
        // Given
        repository.save(testUser1).block();
        
        // When & Then
        StepVerifier.create(repository.deleteById("1"))
                .verifyComplete();
        
        // Verify user is deleted
        StepVerifier.create(repository.findById("1"))
                .verifyComplete();
    }
    
    @Test
    void testDelete() {
        // Given
        repository.save(testUser1).block();
        
        // When & Then
        StepVerifier.create(repository.delete(testUser1))
                .verifyComplete();
        
        // Verify user is deleted
        StepVerifier.create(repository.findById("1"))
                .verifyComplete();
    }
    
    @Test
    void testExistsById_True() {
        // Given
        repository.save(testUser1).block();
        
        // When & Then
        StepVerifier.create(repository.existsById("1"))
                .expectNext(true)
                .verifyComplete();
    }
    
    @Test
    void testExistsById_False() {
        // When & Then
        StepVerifier.create(repository.existsById("999"))
                .expectNext(false)
                .verifyComplete();
    }
    
    @Test
    void testExistsByEmail_True() {
        // Given
        repository.save(testUser1).block();
        
        // When & Then
        StepVerifier.create(repository.existsByEmail("john.doe@example.com"))
                .expectNext(true)
                .verifyComplete();
    }
    
    @Test
    void testExistsByEmail_False() {
        // When & Then
        StepVerifier.create(repository.existsByEmail("nonexistent@example.com"))
                .expectNext(false)
                .verifyComplete();
    }
    
    @Test
    void testCount() {
        // Given
        repository.save(testUser1).block();
        repository.save(testUser2).block();
        
        // When & Then
        StepVerifier.create(repository.count())
                .expectNext(2L)
                .verifyComplete();
    }
    
    @Test
    void testDeleteAll() {
        // Given
        repository.save(testUser1).block();
        repository.save(testUser2).block();
        
        // When & Then
        StepVerifier.create(repository.deleteAll())
                .verifyComplete();
        
        // Verify all users are deleted
        StepVerifier.create(repository.count())
                .expectNext(0L)
                .verifyComplete();
    }
    
    @Test
    void testInitializeSampleData() {
        // When & Then
        StepVerifier.create(repository.initializeSampleData())
                .verifyComplete();
        
        // Verify sample data is loaded
        StepVerifier.create(repository.count())
                .expectNext(4L)
                .verifyComplete();
        
        // Verify specific sample users
        StepVerifier.create(repository.findById("1"))
                .expectNextMatches(user -> "John".equals(user.getFirstName()))
                .verifyComplete();
        
        StepVerifier.create(repository.findByEmail("jane.smith@example.com"))
                .expectNextMatches(user -> "Jane".equals(user.getFirstName()))
                .verifyComplete();
    }
    
    @Test
    void testSaveAndUpdate() {
        // Given - Save initial user
        repository.save(testUser1).block();
        
        // When - Update the user
        User updatedUser = testUser1.withUpdatedInfo("Johnny", "Doe", "johnny.doe@example.com");
        
        // Then - Save updated user and verify
        StepVerifier.create(repository.save(updatedUser))
                .expectNext(updatedUser)
                .verifyComplete();
        
        // Verify the user was updated in repository
        StepVerifier.create(repository.findById("1"))
                .expectNextMatches(user -> "Johnny".equals(user.getFirstName()) && 
                                          "johnny.doe@example.com".equals(user.getEmail()))
                .verifyComplete();
    }
}
