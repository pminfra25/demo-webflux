package com.example.demo;

import com.example.demo.model.User;
import com.example.demo.repository.impl.InMemoryUserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.reactive.server.WebTestClient;

/**
 * Integration tests for the complete Spring Boot WebFlux application.
 * 
 * <p>These tests verify the end-to-end behavior of the application
 * including all layers working together.</p>
 * 
 * @author Generated by GitHub Copilot
 * @version 1.0
 * @since 1.0
 */
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class DemoWebfluxApplicationIntegrationTest {
    
    @Autowired
    private WebTestClient webTestClient;
    
    @Autowired
    private InMemoryUserRepository userRepository;
    
    @BeforeEach
    void setUp() {
        // Reset and reinitialize data for each test
        userRepository.deleteAll().block();
        userRepository.initializeSampleData().block();
    }
    
    @Test
    void testCompleteUserWorkflow() {
        // 1. Get initial count (should be 4 sample users)
        webTestClient.get()
                .uri("/api/users/count")
                .accept(MediaType.APPLICATION_JSON)
                .exchange()
                .expectStatus().isOk()
                .expectBody(Long.class)
                .isEqualTo(4L);
        
        // 2. Create a new user
        String newUserJson = """
                {
                    "firstName": "Integration",
                    "lastName": "Test",
                    "email": "integration.test@example.com"
                }
                """;
        
        webTestClient.post()
                .uri("/api/users")
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(newUserJson)
                .exchange()
                .expectStatus().isCreated()
                .expectBody(User.class)
                .value(user -> {
                    assert user.getFirstName().equals("Integration");
                    assert user.getLastName().equals("Test");
                    assert user.getEmail().equals("integration.test@example.com");
                    assert user.getId() != null;
                });
        
        // 3. Verify count increased
        webTestClient.get()
                .uri("/api/users/count")
                .accept(MediaType.APPLICATION_JSON)
                .exchange()
                .expectStatus().isOk()
                .expectBody(Long.class)
                .isEqualTo(5L);
        
        // 4. Get user by email
        webTestClient.get()
                .uri("/api/users/email/integration.test@example.com")
                .accept(MediaType.APPLICATION_JSON)
                .exchange()
                .expectStatus().isOk()
                .expectBody(User.class)
                .value(user -> {
                    assert user.getFirstName().equals("Integration");
                    assert user.getEmail().equals("integration.test@example.com");
                });
        
        // 5. Search for user by name
        webTestClient.get()
                .uri("/api/users/search?name=Integration")
                .accept(MediaType.APPLICATION_JSON)
                .exchange()
                .expectStatus().isOk()
                .expectBodyList(User.class)
                .hasSize(1)
                .value(users -> {
                    User user = users.get(0);
                    assert user.getFirstName().equals("Integration");
                });
        
        // 6. Try to create duplicate user (should fail)
        webTestClient.post()
                .uri("/api/users")
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(newUserJson)
                .exchange()
                .expectStatus().isBadRequest();
        
        // 7. Get all sample users and verify they exist
        webTestClient.get()
                .uri("/api/users")
                .accept(MediaType.APPLICATION_JSON)
                .exchange()
                .expectStatus().isOk()
                .expectBodyList(User.class)
                .hasSize(5)
                .value(users -> {
                    assert users.stream().anyMatch(u -> "John".equals(u.getFirstName()));
                    assert users.stream().anyMatch(u -> "Jane".equals(u.getFirstName()));
                    assert users.stream().anyMatch(u -> "Alice".equals(u.getFirstName()));
                    assert users.stream().anyMatch(u -> "Bob".equals(u.getFirstName()));
                    assert users.stream().anyMatch(u -> "Integration".equals(u.getFirstName()));
                });
    }
    
    @Test
    void testUserNotFoundScenarios() {
        // Test getting non-existent user by ID
        webTestClient.get()
                .uri("/api/users/non-existent-id")
                .accept(MediaType.APPLICATION_JSON)
                .exchange()
                .expectStatus().isNotFound();
        
        // Test getting non-existent user by email
        webTestClient.get()
                .uri("/api/users/email/nonexistent@example.com")
                .accept(MediaType.APPLICATION_JSON)
                .exchange()
                .expectStatus().isNotFound();
        
        // Test deleting non-existent user
        webTestClient.delete()
                .uri("/api/users/non-existent-id")
                .exchange()
                .expectStatus().isNotFound();
        
        // Test user exists for non-existent user
        webTestClient.get()
                .uri("/api/users/non-existent-id/exists")
                .accept(MediaType.APPLICATION_JSON)
                .exchange()
                .expectStatus().isOk()
                .expectBody(Boolean.class)
                .isEqualTo(false);
    }
    
    @Test
    void testUpdateUserWorkflow() {
        // First, get an existing user (John Doe from sample data)
        webTestClient.get()
                .uri("/api/users/1")
                .accept(MediaType.APPLICATION_JSON)
                .exchange()
                .expectStatus().isOk()
                .expectBody(User.class)
                .value(user -> {
                    assert user.getFirstName().equals("John");
                    assert user.getLastName().equals("Doe");
                });
        
        // Update the user
        String updateJson = """
                {
                    "firstName": "Johnny",
                    "lastName": "Updated",
                    "email": "john.updated@example.com"
                }
                """;
        
        webTestClient.put()
                .uri("/api/users/1")
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(updateJson)
                .exchange()
                .expectStatus().isOk()
                .expectBody(User.class)
                .value(user -> {
                    assert user.getFirstName().equals("Johnny");
                    assert user.getLastName().equals("Updated");
                    assert user.getEmail().equals("john.updated@example.com");
                    assert user.getId().equals("1");
                });
        
        // Verify the update persisted
        webTestClient.get()
                .uri("/api/users/1")
                .accept(MediaType.APPLICATION_JSON)
                .exchange()
                .expectStatus().isOk()
                .expectBody(User.class)
                .value(user -> {
                    assert user.getFirstName().equals("Johnny");
                    assert user.getLastName().equals("Updated");
                });
    }
}
