package com.example.demo.model;

import org.junit.jupiter.api.Test;
import java.time.LocalDateTime;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Unit tests for the User model class.
 * 
 * <p>These tests verify the correct behavior of the User model including
 * constructors, getters, equals, hashCode, toString, and helper methods.</p>
 * 
 * @author Generated by GitHub Copilot
 * @version 1.0
 * @since 1.0
 */
class UserTest {
    
    @Test
    void testUserConstructorWithAllFields() {
        // Given
        LocalDateTime now = LocalDateTime.now();
        
        // When
        User user = new User("1", "John", "Doe", "john.doe@example.com", now, now);
        
        // Then
        assertEquals("1", user.getId());
        assertEquals("John", user.getFirstName());
        assertEquals("Doe", user.getLastName());
        assertEquals("john.doe@example.com", user.getEmail());
        assertEquals(now, user.getCreatedAt());
        assertEquals(now, user.getUpdatedAt());
    }
    
    @Test
    void testUserConstructorWithoutTimestamps() {
        // Given/When
        User user = new User("1", "John", "Doe", "john.doe@example.com");
        
        // Then
        assertEquals("1", user.getId());
        assertEquals("John", user.getFirstName());
        assertEquals("Doe", user.getLastName());
        assertEquals("john.doe@example.com", user.getEmail());
        assertNotNull(user.getCreatedAt());
        assertNotNull(user.getUpdatedAt());
        // Allow small time difference due to execution time
        assertTrue(Math.abs(user.getCreatedAt().getNano() - user.getUpdatedAt().getNano()) < 1000000); // Less than 1ms
    }
    
    @Test
    void testGetFullName() {
        // Given
        User user = new User("1", "John", "Doe", "john.doe@example.com");
        
        // When
        String fullName = user.getFullName();
        
        // Then
        assertEquals("John Doe", fullName);
    }
    
    @Test
    void testWithUpdatedInfo() {
        // Given
        LocalDateTime originalCreated = LocalDateTime.now().minusDays(1);
        LocalDateTime originalUpdated = LocalDateTime.now().minusHours(1);
        User originalUser = new User("1", "John", "Doe", "john.doe@example.com", originalCreated, originalUpdated);
        
        // When
        User updatedUser = originalUser.withUpdatedInfo("Jane", "Smith", "jane.smith@example.com");
        
        // Then
        assertEquals("1", updatedUser.getId()); // ID should remain same
        assertEquals("Jane", updatedUser.getFirstName());
        assertEquals("Smith", updatedUser.getLastName());
        assertEquals("jane.smith@example.com", updatedUser.getEmail());
        assertEquals(originalCreated, updatedUser.getCreatedAt()); // Created should remain same
        assertTrue(updatedUser.getUpdatedAt().isAfter(originalUpdated)); // Updated should be newer
    }
    
    @Test
    void testEquals() {
        // Given
        LocalDateTime now = LocalDateTime.now();
        User user1 = new User("1", "John", "Doe", "john.doe@example.com", now, now);
        User user2 = new User("1", "John", "Doe", "john.doe@example.com", now, now);
        User user3 = new User("2", "John", "Doe", "john.doe@example.com", now, now);
        
        // Then
        assertEquals(user1, user2);
        assertNotEquals(user1, user3);
        assertNotEquals(null, user1);
        assertNotEquals("string", user1);
    }
    
    @Test
    void testHashCode() {
        // Given
        LocalDateTime now = LocalDateTime.now();
        User user1 = new User("1", "John", "Doe", "john.doe@example.com", now, now);
        User user2 = new User("1", "John", "Doe", "john.doe@example.com", now, now);
        
        // Then
        assertEquals(user1.hashCode(), user2.hashCode());
    }
    
    @Test
    void testToString() {
        // Given
        LocalDateTime now = LocalDateTime.now();
        User user = new User("1", "John", "Doe", "john.doe@example.com", now, now);
        
        // When
        String toString = user.toString();
        
        // Then
        assertTrue(toString.contains("id='1'"));
        assertTrue(toString.contains("firstName='John'"));
        assertTrue(toString.contains("lastName='Doe'"));
        assertTrue(toString.contains("email='john.doe@example.com'"));
        assertTrue(toString.contains("User{"));
    }
}
