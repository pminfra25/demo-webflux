package com.example.demo.service;

import com.example.demo.model.User;
import com.example.demo.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

/**
 * Unit tests for the UserService class.
 * 
 * <p>These tests verify the correct behavior of the service layer including
 * business logic, validation, and error handling using mocked dependencies.</p>
 * 
 * @author Generated by GitHub Copilot
 * @version 1.0
 * @since 1.0
 */
@ExtendWith(MockitoExtension.class)
class UserServiceTest {
    
    @Mock
    private UserRepository userRepository;
    
    @InjectMocks
    private UserService userService;
    
    private User testUser;
    
    @BeforeEach
    void setUp() {
        testUser = new User("1", "John", "Doe", "john.doe@example.com");
    }
    
    @Test
    void testCreateUser_Success() {
        // Given
        when(userRepository.existsByEmail("john.doe@example.com")).thenReturn(Mono.just(false));
        when(userRepository.save(any(User.class))).thenReturn(Mono.just(testUser));
        
        // When & Then
        StepVerifier.create(userService.createUser("John", "Doe", "john.doe@example.com"))
                .expectNextMatches(user -> "John".equals(user.getFirstName()) &&
                                          "Doe".equals(user.getLastName()) &&
                                          "john.doe@example.com".equals(user.getEmail()))
                .verifyComplete();
    }
    
    @Test
    void testCreateUser_EmailAlreadyExists() {
        // Given
        when(userRepository.existsByEmail("john.doe@example.com")).thenReturn(Mono.just(true));
        
        // When & Then
        StepVerifier.create(userService.createUser("John", "Doe", "john.doe@example.com"))
                .expectErrorMatches(throwable -> throwable instanceof IllegalArgumentException &&
                                                throwable.getMessage().contains("Email already exists"))
                .verify();
    }
    
    @Test
    void testGetUserById_Found() {
        // Given
        when(userRepository.findById("1")).thenReturn(Mono.just(testUser));
        
        // When & Then
        StepVerifier.create(userService.getUserById("1"))
                .expectNext(testUser)
                .verifyComplete();
    }
    
    @Test
    void testGetUserById_NotFound() {
        // Given
        when(userRepository.findById("999")).thenReturn(Mono.empty());
        
        // When & Then
        StepVerifier.create(userService.getUserById("999"))
                .verifyComplete();
    }
    
    @Test
    void testGetUserByEmail() {
        // Given
        when(userRepository.findByEmail("john.doe@example.com")).thenReturn(Mono.just(testUser));
        
        // When & Then
        StepVerifier.create(userService.getUserByEmail("john.doe@example.com"))
                .expectNext(testUser)
                .verifyComplete();
    }
    
    @Test
    void testGetAllUsers() {
        // Given
        User user2 = new User("2", "Jane", "Smith", "jane.smith@example.com");
        when(userRepository.findAll()).thenReturn(Flux.just(testUser, user2));
        
        // When & Then
        StepVerifier.create(userService.getAllUsers())
                .expectNext(testUser, user2)
                .verifyComplete();
    }
    
    @Test
    void testSearchUsersByName() {
        // Given
        when(userRepository.findByNameContaining("John")).thenReturn(Flux.just(testUser));
        
        // When & Then
        StepVerifier.create(userService.searchUsersByName("John"))
                .expectNext(testUser)
                .verifyComplete();
    }
    
    @Test
    void testUpdateUser_Success() {
        // Given
        User updatedUser = testUser.withUpdatedInfo("Johnny", "Doe", "johnny.doe@example.com");
        when(userRepository.findById("1")).thenReturn(Mono.just(testUser));
        when(userRepository.existsByEmail("johnny.doe@example.com")).thenReturn(Mono.just(false));
        when(userRepository.save(any(User.class))).thenReturn(Mono.just(updatedUser));
        
        // When & Then
        StepVerifier.create(userService.updateUser("1", "Johnny", "Doe", "johnny.doe@example.com"))
                .expectNextMatches(user -> "Johnny".equals(user.getFirstName()) &&
                                          "johnny.doe@example.com".equals(user.getEmail()))
                .verifyComplete();
    }
    
    @Test
    void testUpdateUser_UserNotFound() {
        // Given
        when(userRepository.findById("999")).thenReturn(Mono.empty());
        
        // When & Then
        StepVerifier.create(userService.updateUser("999", "Johnny", "Doe", "johnny.doe@example.com"))
                .expectErrorMatches(throwable -> throwable instanceof IllegalArgumentException &&
                                                throwable.getMessage().contains("User not found"))
                .verify();
    }
    
    @Test
    void testUpdateUser_EmailConflict() {
        // Given
        when(userRepository.findById("1")).thenReturn(Mono.just(testUser));
        when(userRepository.existsByEmail("conflict@example.com")).thenReturn(Mono.just(true));
        
        // When & Then
        StepVerifier.create(userService.updateUser("1", "Johnny", "Doe", "conflict@example.com"))
                .expectErrorMatches(throwable -> throwable instanceof IllegalArgumentException &&
                                                throwable.getMessage().contains("Email already exists"))
                .verify();
    }
    
    @Test
    void testUpdateUser_SameEmail() {
        // Given
        User updatedUser = testUser.withUpdatedInfo("Johnny", "Doe", "john.doe@example.com");
        when(userRepository.findById("1")).thenReturn(Mono.just(testUser));
        when(userRepository.save(any(User.class))).thenReturn(Mono.just(updatedUser));
        
        // When & Then
        StepVerifier.create(userService.updateUser("1", "Johnny", "Doe", "john.doe@example.com"))
                .expectNextMatches(user -> "Johnny".equals(user.getFirstName()) &&
                                          "john.doe@example.com".equals(user.getEmail()))
                .verifyComplete();
    }
    
    @Test
    void testDeleteUser_Success() {
        // Given
        when(userRepository.existsById("1")).thenReturn(Mono.just(true));
        when(userRepository.deleteById("1")).thenReturn(Mono.empty());
        
        // When & Then
        StepVerifier.create(userService.deleteUser("1"))
                .expectNext(true)
                .verifyComplete();
    }
    
    @Test
    void testDeleteUser_NotFound() {
        // Given
        when(userRepository.existsById("999")).thenReturn(Mono.just(false));
        
        // When & Then
        StepVerifier.create(userService.deleteUser("999"))
                .expectNext(false)
                .verifyComplete();
    }
    
    @Test
    void testUserExists() {
        // Given
        when(userRepository.existsById("1")).thenReturn(Mono.just(true));
        
        // When & Then
        StepVerifier.create(userService.userExists("1"))
                .expectNext(true)
                .verifyComplete();
    }
    
    @Test
    void testEmailExists() {
        // Given
        when(userRepository.existsByEmail("john.doe@example.com")).thenReturn(Mono.just(true));
        
        // When & Then
        StepVerifier.create(userService.emailExists("john.doe@example.com"))
                .expectNext(true)
                .verifyComplete();
    }
    
    @Test
    void testGetUserCount() {
        // Given
        when(userRepository.count()).thenReturn(Mono.just(5L));
        
        // When & Then
        StepVerifier.create(userService.getUserCount())
                .expectNext(5L)
                .verifyComplete();
    }
    
    @Test
    void testDeleteAllUsers() {
        // Given
        when(userRepository.deleteAll()).thenReturn(Mono.empty());
        
        // When & Then
        StepVerifier.create(userService.deleteAllUsers())
                .verifyComplete();
    }
}
