package com.example.demo.controller;

import com.example.demo.model.User;
import com.example.demo.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * REST controller for User operations in a Spring WebFlux application.
 * 
 * <p>This controller provides RESTful endpoints for user management operations.
 * It follows reactive programming principles using {@link Mono} and {@link Flux}
 * for non-blocking, asynchronous request handling.</p>
 * 
 * <p>Available endpoints:</p>
 * <ul>
 *   <li>GET /api/users - Get all users</li>
 *   <li>GET /api/users/{id} - Get user by ID</li>
 *   <li>GET /api/users/email/{email} - Get user by email</li>
 *   <li>GET /api/users/search?name={term} - Search users by name</li>
 *   <li>POST /api/users - Create new user</li>
 *   <li>PUT /api/users/{id} - Update user</li>
 *   <li>DELETE /api/users/{id} - Delete user</li>
 *   <li>GET /api/users/count - Get total user count</li>
 * </ul>
 * 
 * @author Generated by GitHub Copilot
 * @version 1.0
 * @since 1.0
 */
@RestController
@RequestMapping("/api/users")
@CrossOrigin(origins = "*") // Allow CORS for development
@Tag(name = "User Management", description = "REST API for managing users in the system")
public class UserController {
    
    private final UserService userService;
    
    /**
     * Constructor for dependency injection.
     * 
     * @param userService the user service to be injected
     */
    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }
    
    /**
     * Retrieves all users.
     * 
     * <p>GET /api/users</p>
     * 
     * @return a {@link Flux} of all users
     */
    @GetMapping
    @Operation(
        summary = "Get all users",
        description = "Retrieves all users from the system including sample data"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Successfully retrieved all users",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = User.class)
            )
        )
    })
    public Flux<User> getAllUsers() {
        return userService.getAllUsers();
    }
    
    /**
     * Retrieves a user by their unique identifier.
     * 
     * <p>GET /api/users/{id}</p>
     * 
     * @param id the user ID to search for
     * @return a {@link Mono} with ResponseEntity containing the user or 404 if not found
     */
    @GetMapping("/{id}")
    @Operation(
        summary = "Get user by ID",
        description = "Retrieves a specific user by their unique identifier"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "User found and returned",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = User.class)
            )
        ),
        @ApiResponse(
            responseCode = "404",
            description = "User not found with the provided ID"
        )
    })
    public Mono<ResponseEntity<User>> getUserById(
            @Parameter(description = "Unique identifier of the user", example = "1")
            @PathVariable String id) {
        return userService.getUserById(id)
                .map(ResponseEntity::ok)
                .defaultIfEmpty(ResponseEntity.notFound().build());
    }
    
    /**
     * Retrieves a user by their email address.
     * 
     * <p>GET /api/users/email/{email}</p>
     * 
     * @param email the email address to search for
     * @return a {@link Mono} with ResponseEntity containing the user or 404 if not found
     */
    @GetMapping("/email/{email}")
    @Operation(
        summary = "Get user by email",
        description = "Retrieves a specific user by their email address"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "User found and returned",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = User.class)
            )
        ),
        @ApiResponse(
            responseCode = "404",
            description = "User not found with the provided email address"
        )
    })
    public Mono<ResponseEntity<User>> getUserByEmail(
            @Parameter(description = "Email address of the user", example = "john.doe@example.com")
            @PathVariable String email) {
        return userService.getUserByEmail(email)
                .map(ResponseEntity::ok)
                .defaultIfEmpty(ResponseEntity.notFound().build());
    }
    
    /**
     * Searches for users by name.
     * 
     * <p>GET /api/users/search?name={searchTerm}</p>
     * 
     * @param name the search term for user names
     * @return a {@link Flux} of matching users
     */
    @GetMapping("/search")
    @Operation(
        summary = "Search users by name",
        description = "Searches for users whose first or last name contains the provided search term"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Search completed successfully (may return empty list if no matches)",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = User.class)
            )
        )
    })
    public Flux<User> searchUsers(
            @Parameter(description = "Search term to match against user names", example = "John")
            @RequestParam String name) {
        return userService.searchUsersByName(name);
    }
    
    /**
     * Creates a new user.
     * 
     * <p>POST /api/users</p>
     * 
     * @param userRequest the user creation request containing user details
     * @return a {@link Mono} with ResponseEntity containing the created user or error
     */
    @PostMapping
    @Operation(
        summary = "Create a new user",
        description = "Creates a new user in the system. Email must be unique."
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "201",
            description = "User created successfully",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = User.class)
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "Bad request - email already exists or invalid data"
        )
    })
    public Mono<ResponseEntity<User>> createUser(
            @Parameter(description = "User creation request with firstName, lastName, and email")
            @RequestBody UserCreateRequest userRequest) {
        return userService.createUser(
                userRequest.getFirstName(),
                userRequest.getLastName(),
                userRequest.getEmail()
        )
        .map(user -> ResponseEntity.status(HttpStatus.CREATED).body(user))
        .onErrorResume(IllegalArgumentException.class, 
            e -> Mono.just(ResponseEntity.badRequest().build()));
    }
    
    /**
     * Updates an existing user.
     * 
     * <p>PUT /api/users/{id}</p>
     * 
     * @param id the ID of the user to update
     * @param userRequest the user update request containing new user details
     * @return a {@link Mono} with ResponseEntity containing the updated user or error
     */
    @PutMapping("/{id}")
    @Operation(
        summary = "Update an existing user",
        description = "Updates an existing user's information. Email must be unique if changed."
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "User updated successfully",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = User.class)
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "Bad request - email already exists or invalid data"
        ),
        @ApiResponse(
            responseCode = "404",
            description = "User not found with the provided ID"
        )
    })
    public Mono<ResponseEntity<User>> updateUser(
            @Parameter(description = "Unique identifier of the user to update", example = "1")
            @PathVariable String id,
            @Parameter(description = "User update request with new firstName, lastName, and email")
            @RequestBody UserUpdateRequest userRequest) {
        return userService.updateUser(
                id,
                userRequest.getFirstName(),
                userRequest.getLastName(),
                userRequest.getEmail()
        )
        .map(ResponseEntity::ok)
        .onErrorResume(IllegalArgumentException.class,
            e -> Mono.just(ResponseEntity.badRequest().build()));
    }
    
    /**
     * Deletes a user by their unique identifier.
     * 
     * <p>DELETE /api/users/{id}</p>
     * 
     * @param id the ID of the user to delete
     * @return a {@link Mono} with ResponseEntity indicating success or failure
     */
    @DeleteMapping("/{id}")
    @Operation(
        summary = "Delete a user",
        description = "Deletes a user from the system by their unique identifier"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "204",
            description = "User deleted successfully"
        ),
        @ApiResponse(
            responseCode = "404",
            description = "User not found with the provided ID"
        )
    })
    public Mono<ResponseEntity<Void>> deleteUser(
            @Parameter(description = "Unique identifier of the user to delete", example = "1")
            @PathVariable String id) {
        return userService.deleteUser(id)
                .map(deleted -> {
                    if (Boolean.TRUE.equals(deleted)) {
                        return ResponseEntity.noContent().<Void>build();
                    } else {
                        return ResponseEntity.notFound().<Void>build();
                    }
                });
    }
    
    /**
     * Gets the total count of users.
     * 
     * <p>GET /api/users/count</p>
     * 
     * @return a {@link Mono} containing the user count
     */
    @GetMapping("/count")
    @Operation(
        summary = "Get user count",
        description = "Returns the total number of users in the system"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Successfully retrieved user count",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = Long.class, example = "5")
            )
        )
    })
    public Mono<Long> getUserCount() {
        return userService.getUserCount();
    }
    
    /**
     * Checks if a user exists with the given ID.
     * 
     * <p>GET /api/users/{id}/exists</p>
     * 
     * @param id the user ID to check
     * @return a {@link Mono} containing true if user exists, false otherwise
     */
    @GetMapping("/{id}/exists")
    @Operation(
        summary = "Check if user exists",
        description = "Checks if a user exists in the system with the provided ID"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Successfully checked user existence",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = Boolean.class, example = "true")
            )
        )
    })
    public Mono<Boolean> userExists(
            @Parameter(description = "Unique identifier of the user to check", example = "1")
            @PathVariable String id) {
        return userService.userExists(id);
    }
    
    /**
     * Request DTO for creating a new user.
     */
    @Schema(description = "Request payload for creating a new user")
    public static class UserCreateRequest {
        @Schema(description = "User's first name", example = "John")
        private String firstName;
        
        @Schema(description = "User's last name", example = "Doe")
        private String lastName;
        
        @Schema(description = "User's email address (must be unique)", example = "john.doe@example.com")
        private String email;
        
        // Default constructor for Jackson
        public UserCreateRequest() {}
        
        public UserCreateRequest(String firstName, String lastName, String email) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.email = email;
        }
        
        public String getFirstName() {
            return firstName;
        }
        
        public void setFirstName(String firstName) {
            this.firstName = firstName;
        }
        
        public String getLastName() {
            return lastName;
        }
        
        public void setLastName(String lastName) {
            this.lastName = lastName;
        }
        
        public String getEmail() {
            return email;
        }
        
        public void setEmail(String email) {
            this.email = email;
        }
    }
    
    /**
     * Request DTO for updating an existing user.
     */
    @Schema(description = "Request payload for updating an existing user")
    public static class UserUpdateRequest {
        @Schema(description = "User's first name", example = "Jane")
        private String firstName;
        
        @Schema(description = "User's last name", example = "Smith")
        private String lastName;
        
        @Schema(description = "User's email address (must be unique)", example = "jane.smith@example.com")
        private String email;
        
        // Default constructor for Jackson
        public UserUpdateRequest() {}
        
        public UserUpdateRequest(String firstName, String lastName, String email) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.email = email;
        }
        
        public String getFirstName() {
            return firstName;
        }
        
        public void setFirstName(String firstName) {
            this.firstName = firstName;
        }
        
        public String getLastName() {
            return lastName;
        }
        
        public void setLastName(String lastName) {
            this.lastName = lastName;
        }
        
        public String getEmail() {
            return email;
        }
        
        public void setEmail(String email) {
            this.email = email;
        }
    }
}
