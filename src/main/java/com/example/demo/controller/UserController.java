package com.example.demo.controller;

import com.example.demo.model.User;
import com.example.demo.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * REST controller for User operations in a Spring WebFlux application.
 * 
 * <p>This controller provides RESTful endpoints for user management operations.
 * It follows reactive programming principles using {@link Mono} and {@link Flux}
 * for non-blocking, asynchronous request handling.</p>
 * 
 * <p>Available endpoints:</p>
 * <ul>
 *   <li>GET /api/users - Get all users</li>
 *   <li>GET /api/users/{id} - Get user by ID</li>
 *   <li>GET /api/users/email/{email} - Get user by email</li>
 *   <li>GET /api/users/search?name={term} - Search users by name</li>
 *   <li>POST /api/users - Create new user</li>
 *   <li>PUT /api/users/{id} - Update user</li>
 *   <li>DELETE /api/users/{id} - Delete user</li>
 *   <li>GET /api/users/count - Get total user count</li>
 * </ul>
 * 
 * @author Generated by GitHub Copilot
 * @version 1.0
 * @since 1.0
 */
@RestController
@RequestMapping("/api/users")
@CrossOrigin(origins = "*") // Allow CORS for development
public class UserController {
    
    private final UserService userService;
    
    /**
     * Constructor for dependency injection.
     * 
     * @param userService the user service to be injected
     */
    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }
    
    /**
     * Retrieves all users.
     * 
     * <p>GET /api/users</p>
     * 
     * @return a {@link Flux} of all users
     */
    @GetMapping
    public Flux<User> getAllUsers() {
        return userService.getAllUsers();
    }
    
    /**
     * Retrieves a user by their unique identifier.
     * 
     * <p>GET /api/users/{id}</p>
     * 
     * @param id the user ID to search for
     * @return a {@link Mono} with ResponseEntity containing the user or 404 if not found
     */
    @GetMapping("/{id}")
    public Mono<ResponseEntity<User>> getUserById(@PathVariable String id) {
        return userService.getUserById(id)
                .map(ResponseEntity::ok)
                .defaultIfEmpty(ResponseEntity.notFound().build());
    }
    
    /**
     * Retrieves a user by their email address.
     * 
     * <p>GET /api/users/email/{email}</p>
     * 
     * @param email the email address to search for
     * @return a {@link Mono} with ResponseEntity containing the user or 404 if not found
     */
    @GetMapping("/email/{email}")
    public Mono<ResponseEntity<User>> getUserByEmail(@PathVariable String email) {
        return userService.getUserByEmail(email)
                .map(ResponseEntity::ok)
                .defaultIfEmpty(ResponseEntity.notFound().build());
    }
    
    /**
     * Searches for users by name.
     * 
     * <p>GET /api/users/search?name={searchTerm}</p>
     * 
     * @param name the search term for user names
     * @return a {@link Flux} of matching users
     */
    @GetMapping("/search")
    public Flux<User> searchUsers(@RequestParam String name) {
        return userService.searchUsersByName(name);
    }
    
    /**
     * Creates a new user.
     * 
     * <p>POST /api/users</p>
     * 
     * @param userRequest the user creation request containing user details
     * @return a {@link Mono} with ResponseEntity containing the created user or error
     */
    @PostMapping
    public Mono<ResponseEntity<User>> createUser(@RequestBody UserCreateRequest userRequest) {
        return userService.createUser(
                userRequest.getFirstName(),
                userRequest.getLastName(),
                userRequest.getEmail()
        )
        .map(user -> ResponseEntity.status(HttpStatus.CREATED).body(user))
        .onErrorResume(IllegalArgumentException.class, 
            e -> Mono.just(ResponseEntity.badRequest().build()));
    }
    
    /**
     * Updates an existing user.
     * 
     * <p>PUT /api/users/{id}</p>
     * 
     * @param id the ID of the user to update
     * @param userRequest the user update request containing new user details
     * @return a {@link Mono} with ResponseEntity containing the updated user or error
     */
    @PutMapping("/{id}")
    public Mono<ResponseEntity<User>> updateUser(@PathVariable String id, 
                                                @RequestBody UserUpdateRequest userRequest) {
        return userService.updateUser(
                id,
                userRequest.getFirstName(),
                userRequest.getLastName(),
                userRequest.getEmail()
        )
        .map(ResponseEntity::ok)
        .onErrorResume(IllegalArgumentException.class,
            e -> Mono.just(ResponseEntity.badRequest().build()));
    }
    
    /**
     * Deletes a user by their unique identifier.
     * 
     * <p>DELETE /api/users/{id}</p>
     * 
     * @param id the ID of the user to delete
     * @return a {@link Mono} with ResponseEntity indicating success or failure
     */
    @DeleteMapping("/{id}")
    public Mono<ResponseEntity<Void>> deleteUser(@PathVariable String id) {
        return userService.deleteUser(id)
                .map(deleted -> {
                    if (Boolean.TRUE.equals(deleted)) {
                        return ResponseEntity.noContent().<Void>build();
                    } else {
                        return ResponseEntity.notFound().<Void>build();
                    }
                });
    }
    
    /**
     * Gets the total count of users.
     * 
     * <p>GET /api/users/count</p>
     * 
     * @return a {@link Mono} containing the user count
     */
    @GetMapping("/count")
    public Mono<Long> getUserCount() {
        return userService.getUserCount();
    }
    
    /**
     * Checks if a user exists with the given ID.
     * 
     * <p>GET /api/users/{id}/exists</p>
     * 
     * @param id the user ID to check
     * @return a {@link Mono} containing true if user exists, false otherwise
     */
    @GetMapping("/{id}/exists")
    public Mono<Boolean> userExists(@PathVariable String id) {
        return userService.userExists(id);
    }
    
    /**
     * Request DTO for creating a new user.
     */
    public static class UserCreateRequest {
        private String firstName;
        private String lastName;
        private String email;
        
        // Default constructor for Jackson
        public UserCreateRequest() {}
        
        public UserCreateRequest(String firstName, String lastName, String email) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.email = email;
        }
        
        public String getFirstName() {
            return firstName;
        }
        
        public void setFirstName(String firstName) {
            this.firstName = firstName;
        }
        
        public String getLastName() {
            return lastName;
        }
        
        public void setLastName(String lastName) {
            this.lastName = lastName;
        }
        
        public String getEmail() {
            return email;
        }
        
        public void setEmail(String email) {
            this.email = email;
        }
    }
    
    /**
     * Request DTO for updating an existing user.
     */
    public static class UserUpdateRequest {
        private String firstName;
        private String lastName;
        private String email;
        
        // Default constructor for Jackson
        public UserUpdateRequest() {}
        
        public UserUpdateRequest(String firstName, String lastName, String email) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.email = email;
        }
        
        public String getFirstName() {
            return firstName;
        }
        
        public void setFirstName(String firstName) {
            this.firstName = firstName;
        }
        
        public String getLastName() {
            return lastName;
        }
        
        public void setLastName(String lastName) {
            this.lastName = lastName;
        }
        
        public String getEmail() {
            return email;
        }
        
        public void setEmail(String email) {
            this.email = email;
        }
    }
}
