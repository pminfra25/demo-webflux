package com.example.demo.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;

import java.time.LocalDateTime;
import java.util.Objects;

/**
 * Immutable User model class for WebFlux reactive applications.
 * 
 * <p>This class represents a user entity with basic information and audit timestamps.
 * It follows immutable design principles, making it suitable for reactive programming
 * patterns used in Spring WebFlux applications.</p>
 * 
 * <p>Key characteristics:</p>
 * <ul>
 *   <li>All fields are final (immutable)</li>
 *   <li>Includes Jackson annotations for JSON serialization</li>
 *   <li>Provides builder-style update methods</li>
 *   <li>Implements proper equals, hashCode, and toString methods</li>
 * </ul>
 * 
 * @author Generated by GitHub Copilot
 * @version 1.0
 * @since 1.0
 */
@Schema(description = "User entity representing a system user with personal information and audit timestamps")
public class User {
    
    /** Unique identifier for the user */
    @Schema(description = "Unique identifier for the user", example = "123e4567-e89b-12d3-a456-426614174000")
    private final String id;
    
    /** User's first name */
    @Schema(description = "User's first name", example = "John")
    private final String firstName;
    
    /** User's last name */
    @Schema(description = "User's last name", example = "Doe")
    private final String lastName;
    
    /** User's email address */
    @Schema(description = "User's email address (must be unique in the system)", example = "john.doe@example.com")
    private final String email;
    
    /** Timestamp when the user was created */
    @Schema(description = "Timestamp when the user was created", example = "2023-12-01T10:30:00")
    private final LocalDateTime createdAt;
    
    /** Timestamp when the user was last updated */
    @Schema(description = "Timestamp when the user was last updated", example = "2023-12-01T15:45:30")
    private final LocalDateTime updatedAt;
    
    /**
     * Primary constructor for creating a User with all fields.
     * 
     * <p>This constructor is annotated with {@code @JsonCreator} to support
     * JSON deserialization with Jackson. All parameters are required and
     * should not be null.</p>
     * 
     * @param id the unique identifier for the user, must not be null
     * @param firstName the user's first name, must not be null
     * @param lastName the user's last name, must not be null
     * @param email the user's email address, must not be null
     * @param createdAt the timestamp when the user was created, must not be null
     * @param updatedAt the timestamp when the user was last updated, must not be null
     */
    @JsonCreator
    public User(
            @JsonProperty("id") String id,
            @JsonProperty("firstName") String firstName,
            @JsonProperty("lastName") String lastName,
            @JsonProperty("email") String email,
            @JsonProperty("createdAt") LocalDateTime createdAt,
            @JsonProperty("updatedAt") LocalDateTime updatedAt) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    /**
     * Convenience constructor for creating a new User without explicit timestamps.
     * 
     * <p>This constructor automatically sets both createdAt and updatedAt
     * to the current time using {@code LocalDateTime.now()}.</p>
     * 
     * @param id the unique identifier for the user, must not be null
     * @param firstName the user's first name, must not be null
     * @param lastName the user's last name, must not be null
     * @param email the user's email address, must not be null
     */
    public User(String id, String firstName, String lastName, String email) {
        this(id, firstName, lastName, email, LocalDateTime.now(), LocalDateTime.now());
    }
    
    // Getter methods
    
    /**
     * Returns the unique identifier for this user.
     * 
     * @return the user's unique ID, never null
     */
    public String getId() {
        return id;
    }
    
    /**
     * Returns the user's first name.
     * 
     * @return the user's first name, never null
     */
    public String getFirstName() {
        return firstName;
    }
    
    /**
     * Returns the user's last name.
     * 
     * @return the user's last name, never null
     */
    public String getLastName() {
        return lastName;
    }
    
    /**
     * Returns the user's email address.
     * 
     * @return the user's email address, never null
     */
    public String getEmail() {
        return email;
    }
    
    /**
     * Returns the timestamp when this user was created.
     * 
     * @return the creation timestamp, never null
     */
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }
    
    /**
     * Returns the timestamp when this user was last updated.
     * 
     * @return the last update timestamp, never null
     */
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }
    
    // Helper methods
    
    /**
     * Returns the user's full name by combining first and last name.
     * 
     * <p>The full name is constructed by concatenating the first name,
     * a space character, and the last name.</p>
     * 
     * @return the user's full name in the format "firstName lastName", never null
     */
    public String getFullName() {
        return firstName + " " + lastName;
    }
    
    /**
     * Creates a new User instance with updated information.
     * 
     * <p>This method follows the immutable pattern by creating a new User
     * instance rather than modifying the current one. The new instance will
     * have the same ID and createdAt timestamp, but the updatedAt timestamp
     * will be set to the current time.</p>
     * 
     * @param firstName the new first name, must not be null
     * @param lastName the new last name, must not be null
     * @param email the new email address, must not be null
     * @return a new User instance with updated information, never null
     */
    public User withUpdatedInfo(String firstName, String lastName, String email) {
        return new User(this.id, firstName, lastName, email, this.createdAt, LocalDateTime.now());
    }
    
    /**
     * Indicates whether some other object is "equal to" this User.
     * 
     * <p>Two User objects are considered equal if all their fields
     * (id, firstName, lastName, email, createdAt, updatedAt) are equal.</p>
     * 
     * @param o the reference object with which to compare
     * @return {@code true} if this object is the same as the obj argument;
     *         {@code false} otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        User user = (User) o;
        return Objects.equals(id, user.id) &&
               Objects.equals(firstName, user.firstName) &&
               Objects.equals(lastName, user.lastName) &&
               Objects.equals(email, user.email) &&
               Objects.equals(createdAt, user.createdAt) &&
               Objects.equals(updatedAt, user.updatedAt);
    }
    
    /**
     * Returns a hash code value for this User.
     * 
     * <p>The hash code is computed based on all fields of the User object
     * to maintain the general contract of hashCode.</p>
     * 
     * @return a hash code value for this User
     */
    @Override
    public int hashCode() {
        return Objects.hash(id, firstName, lastName, email, createdAt, updatedAt);
    }
    
    /**
     * Returns a string representation of this User.
     * 
     * <p>The string representation contains all the User's field values
     * in a readable format. This method is primarily useful for debugging
     * and logging purposes.</p>
     * 
     * @return a string representation of this User, never null
     */
    @Override
    public String toString() {
        return "User{" +
                "id='" + id + '\'' +
                ", firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", email='" + email + '\'' +
                ", createdAt=" + createdAt +
                ", updatedAt=" + updatedAt +
                '}';
    }
}
