package com.example.demo.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.servers.Server;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

/**
 * Configuration class for Swagger/OpenAPI documentation.
 * 
 * <p>This configuration sets up OpenAPI documentation for the Spring Boot WebFlux
 * User Management API, providing interactive API documentation accessible via
 * Swagger UI.</p>
 * 
 * <p>Access the documentation at:</p>
 * <ul>
 *   <li>Swagger UI: <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></li>
 *   <li>OpenAPI JSON: <a href="http://localhost:8080/v3/api-docs">http://localhost:8080/v3/api-docs</a></li>
 * </ul>
 * 
 * @author Generated by GitHub Copilot
 * @version 1.0
 * @since 1.0
 */
@Configuration
public class SwaggerConfig {
    
    /**
     * Configures the OpenAPI documentation for the User Management API.
     * 
     * <p>This bean creates the main OpenAPI specification with API metadata,
     * contact information, licensing, and server configuration.</p>
     * 
     * @return OpenAPI configuration object
     */
    @Bean
    public OpenAPI userManagementOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("Spring Boot WebFlux Demo Project API")
                        .description("""
                                A complete reactive user management system built with Spring Boot WebFlux.
                                
                                ## Features
                                - **Reactive Programming**: Built with Spring WebFlux using Mono and Flux
                                - **Complete CRUD Operations**: Create, Read, Update, Delete users
                                - **Advanced Search**: Search users by name with partial matching
                                - **Email Uniqueness**: Validation to prevent duplicate email addresses
                                - **Immutable Design**: Thread-safe User model with builder-style updates
                                
                                ## Sample Data
                                The API comes pre-loaded with sample users:
                                1. John Doe (john.doe@example.com)
                                2. Jane Smith (jane.smith@example.com)
                                3. Alice Johnson (alice.johnson@example.com)
                                4. Bob Brown (bob.brown@example.com)
                                """)
                        .version("1.0.0")
                        .contact(new Contact()
                                .name("GitHub Copilot")
                                .email("support@example.com")
                                .url("https://github.com/pminfra25/demo-webflux"))
                        .license(new License()
                                .name("MIT License")
                                .url("https://opensource.org/licenses/MIT")))
                .servers(List.of(
                        new Server()
                                .url("http://localhost:8080")
                                .description("Local Development Server"),
                        new Server()
                                .url("https://your-production-domain.com")
                                .description("Production Server")));
    }
}
