package com.example.demo.repository;

import com.example.demo.model.User;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Reactive repository interface for User entity operations.
 * 
 * <p>This repository provides reactive, non-blocking data access methods
 * for User entities. It follows Spring WebFlux's reactive programming model
 * using {@link Mono} for single results and {@link Flux} for multiple results.</p>
 * 
 * <p>This is a contract interface that defines the available operations.
 * The actual implementation can be provided by various means:</p>
 * <ul>
 *   <li>In-memory implementation for testing</li>
 *   <li>Database-backed implementation using R2DBC</li>
 *   <li>NoSQL database implementation using MongoDB Reactive</li>
 * </ul>
 * 
 * @author Generated by GitHub Copilot
 * @version 1.0
 * @since 1.0
 */
public interface UserRepository {
    
    /**
     * Saves a user to the repository.
     * 
     * <p>If the user already exists (based on ID), it will be updated.
     * Otherwise, a new user will be created.</p>
     * 
     * @param user the user to save, must not be null
     * @return a {@link Mono} emitting the saved user, never null
     */
    Mono<User> save(User user);
    
    /**
     * Finds a user by their unique identifier.
     * 
     * @param id the user ID to search for, must not be null
     * @return a {@link Mono} emitting the user if found, or empty if not found
     */
    Mono<User> findById(String id);
    
    /**
     * Finds a user by their email address.
     * 
     * <p>Email addresses should be unique in the system, so this method
     * returns a {@link Mono} rather than a {@link Flux}.</p>
     * 
     * @param email the email address to search for, must not be null
     * @return a {@link Mono} emitting the user if found, or empty if not found
     */
    Mono<User> findByEmail(String email);
    
    /**
     * Finds users by their first name.
     * 
     * <p>Multiple users can have the same first name, so this method
     * returns a {@link Flux} of potentially multiple users.</p>
     * 
     * @param firstName the first name to search for, must not be null
     * @return a {@link Flux} emitting all users with the given first name
     */
    Flux<User> findByFirstName(String firstName);
    
    /**
     * Finds users by their last name.
     * 
     * <p>Multiple users can have the same last name, so this method
     * returns a {@link Flux} of potentially multiple users.</p>
     * 
     * @param lastName the last name to search for, must not be null
     * @return a {@link Flux} emitting all users with the given last name
     */
    Flux<User> findByLastName(String lastName);
    
    /**
     * Finds users whose first name or last name contains the given search term.
     * 
     * <p>This method performs a case-insensitive partial match on both
     * first name and last name fields.</p>
     * 
     * @param searchTerm the term to search for, must not be null
     * @return a {@link Flux} emitting all matching users
     */
    Flux<User> findByNameContaining(String searchTerm);
    
    /**
     * Retrieves all users from the repository.
     * 
     * <p><strong>Caution:</strong> This method can return a large number of users.
     * Consider using pagination in production environments.</p>
     * 
     * @return a {@link Flux} emitting all users in the repository
     */
    Flux<User> findAll();
    
    /**
     * Deletes a user by their unique identifier.
     * 
     * @param id the ID of the user to delete, must not be null
     * @return a {@link Mono<Void>} that completes when the deletion is done
     */
    Mono<Void> deleteById(String id);
    
    /**
     * Deletes the specified user from the repository.
     * 
     * @param user the user to delete, must not be null
     * @return a {@link Mono<Void>} that completes when the deletion is done
     */
    Mono<Void> delete(User user);
    
    /**
     * Checks if a user exists with the given ID.
     * 
     * @param id the user ID to check, must not be null
     * @return a {@link Mono} emitting {@code true} if the user exists, {@code false} otherwise
     */
    Mono<Boolean> existsById(String id);
    
    /**
     * Checks if a user exists with the given email address.
     * 
     * <p>This method is useful for validating email uniqueness
     * before creating new users.</p>
     * 
     * @param email the email address to check, must not be null
     * @return a {@link Mono} emitting {@code true} if a user with this email exists, {@code false} otherwise
     */
    Mono<Boolean> existsByEmail(String email);
    
    /**
     * Counts the total number of users in the repository.
     * 
     * @return a {@link Mono} emitting the total count of users
     */
    Mono<Long> count();
    
    /**
     * Deletes all users from the repository.
     * 
     * <p><strong>Caution:</strong> This method will remove all user data.
     * Use with extreme care, typically only in test environments.</p>
     * 
     * @return a {@link Mono<Void>} that completes when all users are deleted
     */
    Mono<Void> deleteAll();
}
