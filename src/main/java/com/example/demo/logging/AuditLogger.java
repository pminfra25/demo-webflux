package com.example.demo.logging;

import com.example.demo.model.User;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Centralized audit logging component for the User Management system.
 * 
 * <p>This component provides structured audit logging for all business operations,
 * security events, and system activities. It follows a consistent format for
 * easy parsing and monitoring by external systems.</p>
 * 
 * <p>Log Format: [AUDIT] [TIMESTAMP] [OPERATION] [USER_ID] [DETAILS] [STATUS]</p>
 * 
 * @author Generated by GitHub Copilot
 * @version 1.0
 * @since 1.0
 */
@Component
public class AuditLogger {
    
    private static final Logger logger = LoggerFactory.getLogger(AuditLogger.class);
    private static final DateTimeFormatter TIMESTAMP_FORMAT = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS");
    
    // Operation types
    public static final String OP_CREATE = "CREATE_USER";
    public static final String OP_READ = "READ_USER";
    public static final String OP_UPDATE = "UPDATE_USER";
    public static final String OP_DELETE = "DELETE_USER";
    public static final String OP_SEARCH = "SEARCH_USERS";
    public static final String OP_COUNT = "COUNT_USERS";
    public static final String OP_EXISTS_CHECK = "EXISTS_CHECK";
    public static final String OP_LIST_ALL = "LIST_ALL_USERS";
    
    // Status types
    public static final String STATUS_SUCCESS = "SUCCESS";
    public static final String STATUS_FAILED = "FAILED";
    public static final String STATUS_NOT_FOUND = "NOT_FOUND";
    public static final String STATUS_DUPLICATE = "DUPLICATE";
    public static final String STATUS_INVALID = "INVALID";
    
    /**
     * Logs a successful user creation operation.
     * 
     * @param user the created user
     */
    public void logUserCreated(User user) {
        logOperation(OP_CREATE, user.getId(), 
            String.format("User created: %s (%s)", user.getFullName(), user.getEmail()), 
            STATUS_SUCCESS);
    }
    
    /**
     * Logs a failed user creation operation.
     * 
     * @param email the email that failed to be created
     * @param reason the reason for failure
     */
    public void logUserCreationFailed(String email, String reason) {
        logOperation(OP_CREATE, "N/A", 
            String.format("User creation failed for email: %s - Reason: %s", email, reason), 
            STATUS_FAILED);
    }
    
    /**
     * Logs a successful user retrieval operation.
     * 
     * @param userId the ID of the retrieved user
     * @param method the method used for retrieval (BY_ID, BY_EMAIL, etc.)
     */
    public void logUserRetrieved(String userId, String method) {
        logOperation(OP_READ, userId, 
            String.format("User retrieved using method: %s", method), 
            STATUS_SUCCESS);
    }
    
    /**
     * Logs a user not found during retrieval.
     * 
     * @param identifier the identifier used for search (ID or email)
     * @param method the method used for retrieval
     */
    public void logUserNotFound(String identifier, String method) {
        logOperation(OP_READ, identifier, 
            String.format("User not found using method: %s", method), 
            STATUS_NOT_FOUND);
    }
    
    /**
     * Logs a successful user update operation.
     * 
     * @param user the updated user
     * @param changedFields the fields that were changed
     */
    public void logUserUpdated(User user, String changedFields) {
        logOperation(OP_UPDATE, user.getId(), 
            String.format("User updated: %s - Changed fields: %s", user.getFullName(), changedFields), 
            STATUS_SUCCESS);
    }
    
    /**
     * Logs a failed user update operation.
     * 
     * @param userId the ID of the user that failed to update
     * @param reason the reason for failure
     */
    public void logUserUpdateFailed(String userId, String reason) {
        logOperation(OP_UPDATE, userId, 
            String.format("User update failed - Reason: %s", reason), 
            STATUS_FAILED);
    }
    
    /**
     * Logs a successful user deletion operation.
     * 
     * @param userId the ID of the deleted user
     */
    public void logUserDeleted(String userId) {
        logOperation(OP_DELETE, userId, 
            "User successfully deleted", 
            STATUS_SUCCESS);
    }
    
    /**
     * Logs a failed user deletion operation.
     * 
     * @param userId the ID of the user that failed to delete
     */
    public void logUserDeleteFailed(String userId) {
        logOperation(OP_DELETE, userId, 
            "User deletion failed - User not found", 
            STATUS_NOT_FOUND);
    }
    
    /**
     * Logs a user search operation.
     * 
     * @param searchTerm the search term used
     * @param resultCount the number of results found
     */
    public void logUserSearch(String searchTerm, long resultCount) {
        logOperation(OP_SEARCH, "N/A", 
            String.format("User search performed - Term: '%s', Results: %d", searchTerm, resultCount), 
            STATUS_SUCCESS);
    }
    
    /**
     * Logs a user count operation.
     * 
     * @param count the total count of users
     */
    public void logUserCount(long count) {
        logOperation(OP_COUNT, "N/A", 
            String.format("User count requested - Total users: %d", count), 
            STATUS_SUCCESS);
    }
    
    /**
     * Logs a user existence check operation.
     * 
     * @param identifier the identifier checked (ID or email)
     * @param exists whether the user exists
     * @param method the method used for check
     */
    public void logUserExistsCheck(String identifier, boolean exists, String method) {
        logOperation(OP_EXISTS_CHECK, identifier, 
            String.format("User existence check using %s - Exists: %s", method, exists), 
            STATUS_SUCCESS);
    }
    
    /**
     * Logs a list all users operation.
     * 
     * @param count the number of users returned
     */
    public void logListAllUsers(long count) {
        logOperation(OP_LIST_ALL, "N/A", 
            String.format("All users listed - Count: %d", count), 
            STATUS_SUCCESS);
    }
    
    /**
     * Logs a duplicate email error.
     * 
     * @param email the duplicate email
     * @param operation the operation that triggered the error
     */
    public void logDuplicateEmail(String email, String operation) {
        logOperation(operation, "N/A", 
            String.format("Duplicate email detected: %s", email), 
            STATUS_DUPLICATE);
    }
    
    /**
     * Logs an invalid input error.
     * 
     * @param operation the operation that triggered the error
     * @param details the error details
     */
    public void logInvalidInput(String operation, String details) {
        logOperation(operation, "N/A", 
            String.format("Invalid input - Details: %s", details), 
            STATUS_INVALID);
    }
    
    /**
     * Logs method entry for debugging purposes.
     * 
     * @param className the class name
     * @param methodName the method name
     * @param parameters the method parameters
     */
    public void logMethodEntry(String className, String methodName, Object... parameters) {
        if (logger.isDebugEnabled()) {
            StringBuilder params = new StringBuilder();
            if (parameters != null && parameters.length > 0) {
                for (int i = 0; i < parameters.length; i++) {
                    if (i > 0) params.append(", ");
                    params.append(parameters[i]);
                }
            }
            logger.debug("[METHOD_ENTRY] [{}] {}({}) - Entering method", 
                getCurrentTimestamp(), className + "." + methodName, params);
        }
    }
    
    /**
     * Logs method exit for debugging purposes.
     * 
     * @param className the class name
     * @param methodName the method name
     * @param executionTime the execution time in milliseconds
     */
    public void logMethodExit(String className, String methodName, long executionTime) {
        if (logger.isDebugEnabled()) {
            logger.debug("[METHOD_EXIT] [{}] {}.{} - Exiting method ({}ms)", 
                getCurrentTimestamp(), className, methodName, executionTime);
        }
    }
    
    /**
     * Logs an error with full context.
     * 
     * @param operation the operation that failed
     * @param error the error that occurred
     * @param context additional context information
     */
    public void logError(String operation, Throwable error, String context) {
        logger.error("[ERROR] [{}] [{}] Context: {} - Error: {}", 
            getCurrentTimestamp(), operation, context, error.getMessage(), error);
    }
    
    /**
     * Core method for structured audit logging.
     * 
     * @param operation the operation being performed
     * @param userId the user ID (or identifier)
     * @param details additional details about the operation
     * @param status the status of the operation
     */
    private void logOperation(String operation, String userId, String details, String status) {
        logger.info("[AUDIT] [{}] [{}] [{}] [{}] [{}]", 
            getCurrentTimestamp(), operation, userId, details, status);
    }
    
    /**
     * Gets the current timestamp in the standard format.
     * 
     * @return formatted timestamp string
     */
    private String getCurrentTimestamp() {
        return LocalDateTime.now().format(TIMESTAMP_FORMAT);
    }
}
